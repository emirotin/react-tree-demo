diff --color --un useState/src/App.tsx signals/src/App.tsx
--- useState/src/App.tsx	2025-03-11 16:45:19
+++ signals/src/App.tsx	2025-03-11 21:03:05
@@ -1,42 +1,42 @@
-import { useCallback, useState } from "react";
+import { useCallback, useMemo } from "react";
 
 import { ROOT_ID } from "./types";
 import { NodePresentation } from "./presentation";
 import { addItem, deleteItem } from "./state";
 import { makeFS } from "./factories";
 
 function App() {
-  const [fs, setFS] = useState(makeFS);
+  const fs = useMemo(makeFS, []);
 
   const onAddFile = useCallback(
     (parentId: string) => {
-      setFS(addItem(fs, parentId, "file"));
+      addItem(fs, parentId, "file");
     },
     [fs]
   );
 
   const onAddFolder = useCallback(
     (parentId: string) => {
-      setFS(addItem(fs, parentId, "folder"));
+      addItem(fs, parentId, "folder");
     },
     [fs]
   );
 
   const onDelete = useCallback(
     (itemId: string) => {
-      setFS(deleteItem(fs, itemId));
+      deleteItem(fs, itemId);
     },
     [fs]
   );
 
   return (
     <div className="p-4">
       <NodePresentation
         fs={fs}
-        id={ROOT_ID}
+        item={fs.nodes[ROOT_ID]}
         onAddFile={onAddFile}
         onAddFolder={onAddFolder}
         onDelete={onDelete}
       />
     </div>
   );
diff --color --un useState/src/factories.ts signals/src/factories.ts
--- useState/src/factories.ts	2024-12-02 15:28:51
+++ signals/src/factories.ts	2025-03-11 21:02:58
@@ -1,6 +1,7 @@
+import { computed, signal } from "@preact/signals-core";
 import { faker } from "@faker-js/faker";
 import { nanoid } from "nanoid";
 
 import {
   type File,
   type Folder,
@@ -11,37 +12,67 @@
 
 export const makeFile = (parentId: string): File =>
   ({
     id: nanoid(),
     parentId,
     name: faker.system.commonFileName(),
-    size: Math.floor(Math.random() * 10_000_000 + 3_000),
+    $size: signal(Math.floor(Math.random() * 10_000_000 + 3_000)),
     __type: "file",
   } satisfies File);
 
-export const makeFolder = (parentId: string): Folder =>
-  ({
-    id: nanoid(),
+export const makeFolder = (fs: FileSystem, parentId: string): Folder => {
+  const selfId = nanoid();
+  return {
+    id: selfId,
     parentId,
     name: faker.system.commonFileName().split(".")[0],
-    childrenIds: [] as string[],
+    $childrenIds: signal<string[]>([]),
     __type: "folder",
-  } satisfies Folder);
+    $size: computed(() => {
+      const self = fs.nodes[selfId] as Folder;
 
-export const makeRoot = (): Root =>
+      return (
+        4_000 +
+        self.$childrenIds.value
+          .map((id) => {
+            const item = fs.nodes[id];
+            return item.$size.value;
+          })
+          .reduce((acc, x) => acc + x, 0)
+      );
+    }),
+  } satisfies Folder;
+};
+
+export const makeRoot = (fs: FileSystem): Root =>
   ({
     id: ROOT_ID,
     parentId: null,
     name: ROOT_ID,
-    childrenIds: [] as string[],
+    $childrenIds: signal<string[]>([]),
     __type: "root",
+    $size: computed(() => {
+      const self = fs.nodes[ROOT_ID] as Root;
+
+      return (
+        4_000 +
+        self.$childrenIds.value
+          .map((id) => {
+            const item = fs.nodes[id];
+            return item.$size.value;
+          })
+          .reduce((acc, x) => acc + x, 0)
+      );
+    }),
   } satisfies Root);
 
 export const makeFS = (): FileSystem => {
-  const root = makeRoot();
+  const fs: FileSystem = {
+    nodes: {},
+  };
 
-  return {
-    nodes: {
-      [root.id]: root,
-    },
-  } satisfies FileSystem;
+  const root = makeRoot(fs);
+
+  fs.nodes[ROOT_ID] = root;
+
+  return fs;
 };
diff --color --un useState/src/presentation.tsx signals/src/presentation.tsx
--- useState/src/presentation.tsx	2024-12-02 15:31:54
+++ signals/src/presentation.tsx	2025-03-11 21:01:15
@@ -1,47 +1,43 @@
-import { useMemo } from "react";
-import { getSize } from "./size";
-import type { File, Folder, Root, FileSystem } from "./types";
-import { formatSize } from "./size";
+import { useSignals } from "@preact/signals-react/runtime";
 import {
   Folder as FolderIcon,
   File as FileIcon,
   FilePlus as FilePlusIcon,
   FolderPlus as FolderPlusIcon,
   Trash as TrashIcon,
 } from "react-feather";
 
+import type { File, Folder, Root, FileSystem, Node } from "./types";
+import { formatSize } from "./size";
+
 export function NodePresentation({
   fs,
-  id,
+  item,
   onAddFile,
   onAddFolder,
   onDelete,
 }: {
   fs: FileSystem;
-  id: string;
+  item: Node;
   onAddFile: (parentId: string) => void;
   onAddFolder: (parentId: string) => void;
   onDelete: (itemId: string) => void;
 }) {
-  const item = fs.nodes[id];
-  const size = useMemo(() => (item ? getSize(fs, id) : 0), [fs, item, id]);
-
   if (!item) {
     return null;
   }
 
   if (item.__type === "file") {
     return <FilePresentation file={item} onDelete={onDelete} />;
   }
 
   return (
     <FolderPresentation
       fs={fs}
       folder={item}
-      size={size}
       onAddFile={onAddFile}
       onAddFolder={onAddFolder}
       onDelete={onDelete}
     />
   );
 }
@@ -54,43 +50,43 @@
   onDelete: (itemId: string) => void;
 }) {
   return (
     <div className="flex flex-row gap-2 items-center group">
       <FileIcon size={16} />
       <span>{file.name}</span>
-      <em>{formatSize(file.size)}</em>
+      <em>{formatSize(file.$size.value)}</em>
       <span className="hidden group-hover:flex gap-1">
         <button type="button" onClick={() => onDelete(file.id)}>
           <TrashIcon size={16} />
         </button>
       </span>
     </div>
   );
 }
 
 function FolderPresentation({
   fs,
   folder,
-  size,
   onAddFile,
   onAddFolder,
   onDelete,
 }: {
   fs: FileSystem;
   folder: Folder | Root;
-  size: number;
   onAddFile: (parentId: string) => void;
   onAddFolder: (parentId: string) => void;
   onDelete: (itemId: string) => void;
 }) {
+  useSignals();
+
   return (
     <div>
       <div className="flex flex-row gap-2 items-center group">
         <FolderIcon size={16} />
         <strong>{folder.name}</strong>
-        <em>{formatSize(size)}</em>
+        <em>{formatSize(folder.$size.value)}</em>
         <span className="hidden group-hover:flex gap-1">
           <button type="button" onClick={() => onAddFolder(folder.id)}>
             <FolderPlusIcon size={16} />
           </button>
           <button type="button" onClick={() => onAddFile(folder.id)}>
             <FilePlusIcon size={16} />
@@ -100,16 +96,16 @@
               <TrashIcon size={16} />
             </button>
           )}
         </span>
       </div>
       <div className="pl-4 border-l">
-        {folder.childrenIds.map((id) => (
+        {folder.$childrenIds.value.map((id) => (
           <NodePresentation
             key={id}
-            id={id}
+            item={fs.nodes[id]}
             fs={fs}
             onAddFile={onAddFile}
             onAddFolder={onAddFolder}
             onDelete={onDelete}
           />
         ))}
diff --color --un useState/src/size.ts signals/src/size.ts
--- useState/src/size.ts	2024-12-02 15:29:42
+++ signals/src/size.ts	2025-03-11 16:57:15
@@ -1,23 +1,6 @@
-import type { FileSystem } from "./types";
-
 export const formatSize = (size: number) => {
   if (size > 1_000_000) {
     return `${(size / 1_000_000).toFixed(2)} MB`;
   }
   return `${(size / 1_000).toFixed(2)} KB`;
-};
-
-export const getSize = (fs: FileSystem, itemId: string): number => {
-  const item = fs.nodes[itemId];
-  if (!item) {
-    return 0;
-  }
-
-  if (item.__type === "file") {
-    return item.size;
-  }
-  return (
-    4_000 +
-    item.childrenIds.map((id) => getSize(fs, id)).reduce((acc, x) => acc + x, 0)
-  );
 };
diff --color --un useState/src/state.ts signals/src/state.ts
--- useState/src/state.ts	2025-03-11 21:09:17
+++ signals/src/state.ts	2025-03-11 21:07:50
@@ -1,28 +1,28 @@
-import { produce } from "immer";
-
-import type { FileSystem, Folder, Root } from "./types";
+import type { FileSystem } from "./types";
 import { makeFile, makeFolder } from "./factories";
 
 export const addItem = (
   fs: FileSystem,
   parentId: string,
   type: "file" | "folder"
-): FileSystem => {
+) => {
   const parent = fs.nodes[parentId];
   if (!parent || parent.__type === "file") {
     throw new Error("Cannot add file as a child of another file");
   }
-  return produce(fs, (fsDraft) => {
-    const newItem = type === "file" ? makeFile(parentId) : makeFolder(parentId);
-    fsDraft.nodes[newItem.id] = newItem;
-    (fsDraft.nodes[parentId] as Folder | Root).childrenIds.push(newItem.id);
-  });
+
+  const newItem =
+    type === "file" ? makeFile(parentId) : makeFolder(fs, parentId);
+
+  fs.nodes[newItem.id] = newItem;
+
+  parent.$childrenIds.value = [...parent.$childrenIds.value, newItem.id];
 };
 
-export const deleteItem = (fs: FileSystem, itemId: string): FileSystem => {
+export const deleteItem = (fs: FileSystem, itemId: string) => {
   const item = fs.nodes[itemId];
   if (!item) {
     throw new Error("Item not found");
   }
   if (item.__type === "root") {
     throw new Error("Cannot delete root");
@@ -32,16 +32,17 @@
   if (!parent) {
     throw new Error("Item doesn't have parent");
   }
   if (parent.__type === "file") {
     throw new Error("Item's parent is invalid");
   }
-  const i = parent.childrenIds.indexOf(itemId);
+  const i = parent.$childrenIds.peek().indexOf(itemId);
   if (i < 0) {
     throw new Error("Item is not marked as child of its parent");
   }
 
-  return produce(fs, (fsDraft) => {
-    (fsDraft.nodes[parentId] as Folder | Root).childrenIds.splice(i, 1);
-    delete fsDraft.nodes[itemId];
-  });
+  delete fs.nodes[itemId];
+
+  parent.$childrenIds.value = parent.$childrenIds.value.filter(
+    (id) => id !== itemId
+  );
 };
diff --color --un useState/src/types.ts signals/src/types.ts
--- useState/src/types.ts	2025-03-11 19:18:44
+++ signals/src/types.ts	2025-03-11 21:01:07
@@ -1,30 +1,32 @@
+import type { ReadonlySignal, Signal } from "@preact/signals-core";
+
 export interface BaseNode {
   name: string;
   id: string;
   parentId: string | null;
+  $size: ReadonlySignal<number>;
 }
 
 export interface File extends BaseNode {
-  size: number;
   parentId: string;
   __type: "file"; // Branded types
 }
 
 export interface Folder extends BaseNode {
-  childrenIds: string[];
+  $childrenIds: Signal<string[]>;
   parentId: string;
   __type: "folder"; // Branded types
 }
 
 export const ROOT_ID = "<root>";
 
 export interface Root extends BaseNode {
   id: typeof ROOT_ID;
   name: typeof ROOT_ID;
-  childrenIds: string[];
+  $childrenIds: Signal<string[]>;
   parentId: null;
   __type: "root"; // Branded types
 }
 
 export type Node = File | Folder | Root;
 
